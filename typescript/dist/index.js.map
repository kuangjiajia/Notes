{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["// function sayHello(person: String) {\n//   return \"Hello, \" + person\n// }\n\n// let isDone: boolean = false\n// let decLiteral: number = 6\n\n// console.log(decLiteral)\n// console.log(isDone)\n// console.log(sayHello(\"kjj\"))\n\n// let hexLiteral: number = 0xf00d\n// console.log(hexLiteral)\n\n// let binaryLiteral: number = 0b1010\n// console.log(binaryLiteral)\n\n// let notANumber: number = NaN\n// console.log(notANumber)\n\n// let octalLiteral: number = 0o744\n// console.log(octalLiteral)\n\n// let infinityNumber = Infinity\n// console.log(infinityNumber)\n\n// let mdzzName: string = \"zzx\"\n// let sbName: string = \"yzp\"\n// console.log(mdzzName)\n// console.log(sbName)\n\n// let sbName = \"sbyzp\"\n// let sentence: string = `Hello, my name is ${sbName}.`\n\n// console.log(sentence)\n\n\n// let handsomeName = \"kjj\"\n// const alertNameF = function (): void {\n//   alert(handsomeName)\n// }\n\n// alertNameF()\n\n// let unusable: void = undefined\n\n// let hobby: string = \"sleep\"\n// let favo: string = \"hhhh\"\n\n// let anyThing: any = 'Tom'\n\n// let something\n// something = \"seven\"\n\n\n\n// let strnum: string | number\n// strnum = \"kjj\"\n// strnum = 20\n\n\n// function getLength(len: string | number): number {\n//   return 123\n// }\n\n// console.log(getLength(998))\n\n// function getStrLen(str: string): number {\n//   return str.length\n// }\n// console.log(getStrLen(\"kuangjiajia\"))\n\n// interface Person {\n//   name: string\n//   age: number\n// }\n\n// let tom: Person = {\n//   name: \"tom\",\n//   age: 20\n// }\n\n// console.log(tom)\n\n\n// interface Person {\n//   name: string\n//   age?: number\n// }\n\n// let tom: Person = {\n//   name: \"kuangjiajia\"\n// }\n\n// interface Person {\n//   name: string\n//   age?: number\n//   [propName: string]: any\n// }\n\n\n// interface Person {\n//   name: string\n//   age: 20\n//   [propName: string]: any\n//   readonly id: string\n// }\n\n// let lx = {\n//   name: \"lx\",\n//   age: 22,\n//   id: \"idsblx\"\n// }\n\n// console.log(lx)\n\n// lx.id = \"idsbllll\"\n\n// console.log(lx)\n\n\n// let fibonacci: (number | string)[] = [1, 2, 3, '1']\n// fibonacci.push(777)\n// console.log(fibonacci)\n\n\n\n// function sumStr(x: string, y: string): string {\n//   return x + y\n// }\n\n// console.log(sumStr(\"zzx,\", \"kjj\"))\n\n// function sum(x: number, y: number): number {\n//   return x + y\n// }\n\n// console.log(sum(1, 2))\n\n\n\n// let mySum: (x: number, y: number) => number = function (x: number, y: number): number {\n//   return x + y\n// }\n\n// console.log(mySum(1, 2))\n\n// interface numArr {\n//   [index: number]: number\n// }\n\n// let fibonacci: numArr = [1, 2, 3, 4]\n// console.log(fibonacci)\n\n// let anyArr: any[] = [1, 2, \"kuangjia\", false]\n\n// console.log(anyArr)\n\n\n// interface SearchFun {\n//   (source: string, subString: string): boolean\n// }\n\n// let mySearch: SearchFun = function (source: string, subString): boolean {\n//   return source.search(subString) === -1\n// } \n\n\n// function buildName(fisrtName: string, lastName?: string): string {\n//   if (lastName) {\n//     return \"Hello,\" + fisrtName + lastName\n//   } else {\n//     return \"Hello,\" + fisrtName\n//   }\n// }\n\n// console.log(buildName(\"kuang\", \"junjia\"))\n\n\n// function push(arr: number[], ...args: number[]): void {\n//   arr.push(...args)\n// }\n\n// let arr: number[] = [1, 2, 3]\n// push(arr, 1, 3, 9, 8)\n// console.log(arr)\n\n// function reverse(x: number | string): number | string {\n//   if (typeof x === \"number\") {\n//     return Number(x).toString().split(\"\").reverse().join(\"\")\n//   } else {\n//     return x.split(\"\").reverse().join(\"\")\n//   }\n// }\n\n// let x = \"kuangjiajia\"\n// console.log(reverse(x))\n\n\n// function getLength(something: string | number): number {\n//   if (typeof something === \"string\") {\n//     return something.length\n//   } else {\n//     return Number(something).toString().length\n//   }\n// }\n\n// console.log(\"length: \" + getLength(999888))\n\n\n// function getLâ‰ ength(str: string | number): number {\n//   if((<string>str).length) {\n//     return (<string>str).length\n//   }else {\n//     return Number(str).toString().length\n//   }\n// } \n\n// let a: number[] = [1, 2, 3, 4]\n// let ro: ReadonlyArray<number> = [1, 2, 3]\n\n// a = ro as number[]\n// console.log(a)\n\n// interface SquareConfig {\n//   color?: string;\n//   width?: number;\n// }\n\n// function createSquare(config: SquareConfig): { color: string; area: number } {\n//   let newSquare = { color: \"white\", area: 100 };\n//   if (config.color) {\n//     newSquare.color = config.color;\n//   }\n//   if (config.width) {\n//     newSquare.area = config.width * config.width;\n//   }\n//   return newSquare;\n// }\n\n// let mySquare = createSquare({ colour: \"black\" } as SquareConfig);\n// console.log(mySquare)\n\n// class Animal {\n//   private name: string;\n//   constructor(theName: string) { this.name = theName; }\n// }\n\n// class Rhino extends Animal {\n//   constructor() { super(\"Rhino\"); }\n// }\n\n// let animal = new Animal(\"Goat\");\n// let rhino = new Rhino();\n\n// console.log(rhino)\n\n// interface Card {\n//   suit: string\n//   card: number\n// }\n\n// interface Deck {\n//   suits: string[]\n//   cards: number[]\n//   createCardPicker(this: Deck): () => Card\n// }\n\n\n// let deck = {\n//   suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n//   cards: Array(52),\n//   createCardPicker: function (this: Deck) {\n//     return () => {\n//       let pickedCard = Math.floor(Math.random() * 52);\n//       let pickedSuit = Math.floor(pickedCard / 13);\n\n//       return { suit: this.suits[pickedSuit], card: pickedCard % 13 };\n//     }\n//   }\n// }\n\n// let cardPicker = deck.createCardPicker();\n// let pickedCard = cardPicker();\n\n// // alert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n// console.log(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n\n\n// const typed = document.getElementById(\"typed\");\n// if (typed) {\n//   const pay = function (current: number, discount: number): number {\n//     return current * (discount / 100);\n//   }\n//   typed.addEventListener(\"click\", function (this: HTMLElement, ev: MouseEvent) {\n//     console.log(pay(1000, 20))\n//   });\n// }\n\n\n// class UI {\n//   name: string\n//   constructor(name) {\n//     this.name = name\n//   }\n//   addEventListener(type: string, handler: (this: UI, e: string) => void) {\n//     handler.call(this, this.name)\n//   }\n// }\n\n// const ui = new UI(\"kuangjiajia\")\n// const onClick = ui.addEventListener(\"click\", function (e: string) {\n//   console.log(this.name)\n// })\n\n// class World {\n//   private max: number\n\n//   country: string\n//   constructor(country: string) {\n//     this.country = country\n//     this.max = 100\n//   }\n\n//   output() {\n//     return this.country\n//   }\n// }\n\n// class Country extends World {\n//   constructor(country: string) {\n//     super(country)\n//   }\n// }\n\n// let china = new Country(\"china\")\n// console.log(china)\n\n\n// class staticClass {\n//   static sName = \"kuangjiajia\"\n//   static sFunc = (): string => staticClass.sName\n// }\n\n// console.log(staticClass.sFunc())\n\n\n// class Employee {\n//   private _fullName: string\n\n//   constructor(_fullName: string) {\n//     this._fullName = _fullName\n//   }\n\n//   get fullName(): string {\n//     return this._fullName\n//   }\n\n//   set fullName(newName: string) {\n//     this._fullName = newName\n//   }\n// }\n\n// let worker = new Employee(\"kuangjiajia\")\n// worker.fullName = \"jiajiakuang\"\n\n\n// abstract class Department {\n//   name: string\n//   constructor(name: string) {\n//     this.name = name\n//   }\n\n//   printName(): void {\n//     console.log(`Department name is ${this.name}`)\n//   }\n\n//   abstract printMeeting(): void\n// }\n\n\n// class AccountingDepartment extends Department {\n//   meeting: string\n//   constructor(name: string, meeting: string) {\n//     super(name)\n//     this.meeting = meeting\n//   }\n\n//   printMeeting(): void {\n//     console.log(`this meeting is ${this.meeting}`)\n//   }\n// }\n\n\n// let kjj = new AccountingDepartment(\"kuangjiajia\", \"redrock\")\n\n// kjj.printMeeting()\n// kjj.printName()\n\n\n// class XDom {\n//   static xdom: XDom | null\n//   static shareInstance = (): XDom => {\n//     if (!XDom.xdom) {\n//       XDom.xdom = new XDom()\n//     }\n//     return XDom.xdom;\n//   }\n\n//   public dom: HTMLElement | null\n\n//   constructor() {\n//     this.dom = document.getElementById(\"root\")\n//   }\n\n//   insert(text: string) {\n//     if (this.dom) {\n//       this.dom.innerText = text\n//     }\n//   }\n\n//   setColor(color: string) {\n//     if (this.dom) {\n//       this.dom.style.color = color\n//     }\n//   }\n// }\n\n// let xdom = new XDom()\n// xdom.insert(\"kuangjiajia\")\n// xdom.setColor(\"pink\")\n\n\n\n\n// function sum({x,y}: {x:number,y:number}): number {\n//   return x + y\n// }\n\n// interface ISum {\n//   x: number\n//   y: number\n// }\n\n// function sum({ x, y }: ISum): number {\n//   return x + y\n// }\n\n// console.log(sum({ x: 1, y: 2 }))\n\n\n// interface Test {\n//   readonly x: string\n//   readonly y: string\n// }\n\n\n// let test: Test = {\n//   x: \"kjj\",\n//   y: \"lx\"\n// }\n\n// console.log(test)\n\n\n// interface ICheckPoint {\n//   x: string\n//   y: string\n// }\n\n// function create(config: ICheckPoint): void {\n//   console.log(config)\n// }\n\n// create({\n//   x: \"x\",\n//   y: \"y\",\n//   zz: \"zzx\"\n// } as ICheckPoint)\n\n// interface A {\n//   x: string\n// }\n\n\n// interface B extends A {\n//   y: string\n// }\n\n// interface IFunc {\n//   sum: (x: number, y: number) => number\n// }\n\n// const d: IFunc = {\n//   sum(x: number, y: number): number {\n//     return x + y\n//   }\n// }\n\n\n// interface iArr {\n//   [index: number]: string\n// }\n\n// let x: iArr = [\"zzx\", \"lx\"]\n\n// console.log(x)\n// console.log(x[0])\n\n// type printType = <T>(args: T) => T\n// function print<T>(args: T): T {\n//   return args\n// }\n\n// console.log(print(\"kuangjiajia\"))\n\n// const _p: printType = print\n\n\n// function extend<T, U>(first: T, second: U): T & U {\n//   let result = <T & U>{}\n//   for (let id in first) {\n//     (<any>result)[id] = (<any>first)[id]\n//   }\n//   for (let id in second) {\n//     if (!result.hasOwnProperty(id)) {\n//       (<any>result)[id] = (<any>second)[id]\n//     }\n//   }\n//   return result\n// }\n\n// class Person {\n//   name: string\n//   constructor(name: string) {\n//     this.name = name\n//   }\n// }\n\n// interface Loggable {\n//   log(name: string): void\n// }\n\n// class ConsoLog implements Loggable {\n//   log(name: string): void {\n//     console.log(name)\n//   }\n// }\n\n// let newObj = extend(new Person(\"kuangjiajia\"), new ConsoLog())\n\n// console.log(newObj)\n\n// function sumStr(input: number | string): string {\n//   if (typeof input === \"string\") {\n//     return `string: ${input}`\n//   } else if (typeof input === \"number\") {\n//     return `number: ${input}`\n//   } else {\n//     throw new Error(\"input error type\")\n//   }\n// }\n\n// console.log(sumStr(\"kuangjiajia\"))\n\n\n\nfunction pluck<T, K extends keyof T>(o: T, names: K[]): T[K][] {\n  return names.map(n => o[n]);\n}\n\nconst d = pluck({\n  d: \"123\"\n}, [\"d\"])\n\nconsole.log(d)"],"names":[],"mappings":";;;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAujBA,SAAS,KAAK,CAAuB,CAAI,EAAE,KAAU;MACnD,OAAO,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;GAC7B;EAED,IAAM,CAAC,GAAG,KAAK,CAAC;MACd,CAAC,EAAE,KAAK;GACT,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;EAET,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;;;;"}